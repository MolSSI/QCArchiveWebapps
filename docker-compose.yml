version: "3.7"

# Note: YAML boolean values (true, false, yes, no, on, off) must be
#  enclosed in quotes, so that the parser interprets them as strings.

services:

  flask:
    # don't specify names if you will do scaling/replicas
    container_name: flask
    build: .
#    env_file: .env
    restart: unless-stopped
    environment:
      # set by a .env file (add to production)
      - MONGO_URI=$MONGO_URI
#      - MONGO_URI=mongodb://doaa:doaapass@mongo_service:27017/qca_logging_db
#    volumes:
#      - ./data/app-data:/var/www
    depends_on:
      - mongo_service
    networks:
      - frontend
      - backend

  mongo_service:
    container_name: mongo_service
    image: mongo:4.2
    restart: unless-stopped
    command: mongod --auth
#    env_file:
#      - .dbpass
    environment:
      MONGO_INITDB_DATABASE: qca_logging_db
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mypass
      MONGODB_DATA_DIR: /data/db
      MONDODB_LOG_DIR: /dev/null
    volumes:
      - ./data/mongodb-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - backend

  webserver:
    container_name: webserver
    build:
      context: nginx
      dockerfile: Dockerfile
    image: webserver:latest
    restart: always
    environment:
      APP_ENV: "prod"
      APP_NAME: "webserver"
      APP_DEBUG: "true"
      SERVICE_NAME: "webserver"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./data/nginx-data:/var/log/nginx
    depends_on:
      - flask
    networks:
      - frontend

networks:
  frontend:
      driver: bridge
  backend:
      driver: bridge

# Volumes are stored in a part of the host filesystem managed
#  by Docker (/var/lib/docker/volumes/ on Linux)
# Define here if volume will be reused by multiple services only
# TODO: use s3 bucket
#volumes:
#  mongodb-data:
#      driver: local
#      driver_opts:
#        type: none
#        device: $PWD/${WEB_APP_PATH}
#        o: bind
#  app-data:
#      driver: local
#      driver_opts:
#        type: none
#        device: $PWD/${WEB_APP_PATH}
#        o: bind
#  nginx-data:
#      driver: local
#      driver_opts:
#        type: none
#        device: $PWD/${WEB_APP_PATH}
#        o: bind



